function simulation_database_creator()
% SIMULATION_DATABASE_CREATOR - SQLite veritabanı oluşturur ve simülasyon verilerini yükler
% Bu fonksiyon atmosferik simülasyon verileri için SQLite veritabanı oluşturur

    % Veritabanı dosya adı
    db_file = 'arinc_verileri.db';
    
    % Eğer veritabanı dosyası mevcutsa sil
    if exist(db_file, 'file')
        delete(db_file);
        fprintf('Mevcut veritabanı dosyası silindi.\n');
    end
    
    try
        % SQLite veritabanına bağlan
        conn = sqlite(db_file, 'create');
        fprintf('SQLite veritabanı oluşturuldu: %s\n', db_file);
        
        % Tabloları oluştur
        create_tables(conn);
        
        % Örnek verileri ekle
        insert_sample_data(conn);
        
        % Veritabanı bağlantısını kapat
        close(conn);
        fprintf('Veritabanı başarıyla oluşturuldu ve veriler eklendi!\n');
        
        % Veritabanını test et
        test_database(db_file);
        
    catch ME
        fprintf('Hata oluştu: %s\n', ME.message);
        if exist('conn', 'var')
            close(conn);
        end
    end
end

function create_tables(conn)
    % Tabloları oluşturan fonksiyon
    
    fprintf('Tablolar oluşturuluyor...\n');
    
    % SIMULATION tablosu
    sql_simulation = [
        'CREATE TABLE IF NOT EXISTS SIMULATION (' ...
        'simulation_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'simulation_name TEXT NOT NULL, ' ...
        'created_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'description TEXT' ...
        ');'
    ];
    exec(conn, sql_simulation);
    
    % LOCATION tablosu
    sql_location = [
        'CREATE TABLE IF NOT EXISTS LOCATION (' ...
        'location_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'latitude REAL NOT NULL, ' ...
        'longitude REAL NOT NULL, ' ...
        'created_at DATETIME DEFAULT CURRENT_TIMESTAMP' ...
        ');'
    ];
    exec(conn, sql_location);
    
    % SIMULATION_RUN tablosu
    sql_simulation_run = [
        'CREATE TABLE IF NOT EXISTS SIMULATION_RUN (' ...
        'run_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'simulation_id INTEGER NOT NULL, ' ...
        'location_id INTEGER NOT NULL, ' ...
        'start_time REAL, ' ...
        'stop_time REAL, ' ...
        'time_step REAL, ' ...
        'status TEXT DEFAULT ''completed'', ' ...
        'created_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'FOREIGN KEY (simulation_id) REFERENCES SIMULATION(simulation_id), ' ...
        'FOREIGN KEY (location_id) REFERENCES LOCATION(location_id)' ...
        ');'
    ];
    exec(conn, sql_simulation_run);
    
    % ATMOSPHERIC_DATA tablosu
    sql_atmospheric = [
        'CREATE TABLE IF NOT EXISTS ATMOSPHERIC_DATA (' ...
        'data_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'run_id INTEGER NOT NULL, ' ...
        'timestamp REAL, ' ...
        'barometric_pressure REAL, ' ...
        'confidence_level REAL, ' ...
        'current_state_value REAL, ' ...
        'velocity_x REAL, ' ...
        'velocity_y REAL, ' ...
        'vertical_rate REAL, ' ...
        'recorded_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'FOREIGN KEY (run_id) REFERENCES SIMULATION_RUN(run_id)' ...
        ');'
    ];
    exec(conn, sql_atmospheric);
    
    % TREND_ANALYSIS tablosu
    sql_trend = [
        'CREATE TABLE IF NOT EXISTS TREND_ANALYSIS (' ...
        'trend_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'run_id INTEGER NOT NULL, ' ...
        'trend_value_1 REAL, ' ...
        'trend_value_2 REAL, ' ...
        'trend_value_3 REAL, ' ...
        'trend_value_4 REAL, ' ...
        'trend_value_5 REAL, ' ...
        'trend_value_6 REAL, ' ...
        'analyzed_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'FOREIGN KEY (run_id) REFERENCES SIMULATION_RUN(run_id)' ...
        ');'
    ];
    exec(conn, sql_trend);
    
    % INPUT_PARAMETERS tablosu
    sql_input = [
        'CREATE TABLE IF NOT EXISTS INPUT_PARAMETERS (' ...
        'input_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'run_id INTEGER NOT NULL, ' ...
        'baroaltitude_input REAL, ' ...
        'lat_input REAL, ' ...
        'lon_input REAL, ' ...
        'velocity_input REAL, ' ...
        'vertrate_input REAL, ' ...
        'created_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'FOREIGN KEY (run_id) REFERENCES SIMULATION_RUN(run_id)' ...
        ');'
    ];
    exec(conn, sql_input);
    
    % OUTPUT_RESULTS tablosu
    sql_output = [
        'CREATE TABLE IF NOT EXISTS OUTPUT_RESULTS (' ...
        'output_id INTEGER PRIMARY KEY AUTOINCREMENT, ' ...
        'run_id INTEGER NOT NULL, ' ...
        'final_output_value REAL, ' ...
        'output_type TEXT, ' ...
        'units TEXT, ' ...
        'generated_at DATETIME DEFAULT CURRENT_TIMESTAMP, ' ...
        'FOREIGN KEY (run_id) REFERENCES SIMULATION_RUN(run_id)' ...
        ');'
    ];
    exec(conn, sql_output);
    
    fprintf('Tüm tablolar başarıyla oluşturuldu.\n');
end

function insert_sample_data(conn)
    % Örnek verileri ekleyen fonksiyon
    
    fprintf('Örnek veriler ekleniyor...\n');
    
    % SIMULATION verileri
    exec(conn, "INSERT INTO SIMULATION (simulation_name, description) VALUES ('Atmospheric Analysis v1', 'İlk atmosferik analiz simülasyonu');");
    exec(conn, "INSERT INTO SIMULATION (simulation_name, description) VALUES ('Weather Prediction', 'Hava durumu tahmin simülasyonu');");
    
    % LOCATION verileri
    exec(conn, "INSERT INTO LOCATION (latitude, longitude) VALUES (47.2124, -78.1948);");
    exec(conn, "INSERT INTO LOCATION (latitude, longitude) VALUES (44.7206, -13.3391);");
    exec(conn, "INSERT INTO LOCATION (latitude, longitude) VALUES (50.6669, -13.1185);");
    
    % SIMULATION_RUN verileri
    exec(conn, "INSERT INTO SIMULATION_RUN (simulation_id, location_id, start_time, stop_time, time_step) VALUES (1, 1, 0.0, 3.6, 0.05);");
    exec(conn, "INSERT INTO SIMULATION_RUN (simulation_id, location_id, start_time, stop_time, time_step) VALUES (1, 2, 0.0, 1.2, 0.05);");
    exec(conn, "INSERT INTO SIMULATION_RUN (simulation_id, location_id, start_time, stop_time, time_step) VALUES (2, 3, 0.0, 2.4, 0.05);");
    
    % INPUT_PARAMETERS verileri
    exec(conn, "INSERT INTO INPUT_PARAMETERS (run_id, baroaltitude_input, lat_input, lon_input, velocity_input, vertrate_input) VALUES (1, 1.0973e+04, 47.2124, -78.1948, 220.2457, -13.0048);");
    exec(conn, "INSERT INTO INPUT_PARAMETERS (run_id, baroaltitude_input, lat_input, lon_input, velocity_input, vertrate_input) VALUES (2, 9.2431e+03, 44.7206, -13.3391, 212.6521, 0.0);");
    exec(conn, "INSERT INTO INPUT_PARAMETERS (run_id, baroaltitude_input, lat_input, lon_input, velocity_input, vertrate_input) VALUES (3, 1.1270e+04, 50.6669, -13.1185, 229.1893, -0.3251);");
    
    % ATMOSPHERIC_DATA verileri
    exec(conn, "INSERT INTO ATMOSPHERIC_DATA (run_id, timestamp, barometric_pressure, confidence_level, current_state_value, velocity_x, velocity_y, vertical_rate) VALUES (1, 0.0, 1013.25, 0.95, 10115.0, 220.24, 212.65, -13.00);");
    exec(conn, "INSERT INTO ATMOSPHERIC_DATA (run_id, timestamp, barometric_pressure, confidence_level, current_state_value, velocity_x, velocity_y, vertical_rate) VALUES (2, 0.5, 1015.30, 0.92, 10120.0, 215.30, 208.90, -0.32);");
    exec(conn, "INSERT INTO ATMOSPHERIC_DATA (run_id, timestamp, barometric_pressure, confidence_level, current_state_value, velocity_x, velocity_y, vertical_rate) VALUES (3, 1.0, 1012.80, 0.98, 10125.0, 225.67, 218.45, 0.15);");
    
    % OUTPUT_RESULTS verileri
    exec(conn, "INSERT INTO OUTPUT_RESULTS (run_id, final_output_value, output_type, units) VALUES (1, 10115.0, 'Altitude', 'meters');");
    exec(conn, "INSERT INTO OUTPUT_RESULTS (run_id, final_output_value, output_type, units) VALUES (2, 10120.0, 'Altitude', 'meters');");
    exec(conn, "INSERT INTO OUTPUT_RESULTS (run_id, final_output_value, output_type, units) VALUES (3, 10125.0, 'Altitude', 'meters');");
    
    % TREND_ANALYSIS verileri (6 değer)
    exec(conn, "INSERT INTO TREND_ANALYSIS (run_id, trend_value_1, trend_value_2, trend_value_3, trend_value_4, trend_value_5, trend_value_6) VALUES (1, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6);");
    exec(conn, "INSERT INTO TREND_ANALYSIS (run_id, trend_value_1, trend_value_2, trend_value_3, trend_value_4, trend_value_5, trend_value_6) VALUES (2, 1.2, 2.4, 3.6, 4.8, 6.0, 7.2);");
    exec(conn, "INSERT INTO TREND_ANALYSIS (run_id, trend_value_1, trend_value_2, trend_value_3, trend_value_4, trend_value_5, trend_value_6) VALUES (3, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0);");
    
    fprintf('Örnek veriler başarıyla eklendi.\n');
end

function test_database(db_file)
    % Veritabanını test eden fonksiyon
    
    fprintf('\n=== VERİTABANI TEST SONUÇLARI ===\n');
    
    conn = sqlite(db_file);
    
    % Tablo sayılarını göster
    tables = {'SIMULATION', 'LOCATION', 'SIMULATION_RUN', ...
              'ATMOSPHERIC_DATA', 'TREND_ANALYSIS', 'INPUT_PARAMETERS', 'OUTPUT_RESULTS'};
    
    for i = 1:length(tables)
        query = sprintf('SELECT COUNT(*) as count FROM %s;', tables{i});
        result = fetch(conn, query);
        fprintf('%s tablosunda %d kayıt bulunuyor.\n', tables{i}, result{1});
    end
    
    % Örnek birleştirilmiş sorgu
    fprintf('\n=== ÖRNEK BİRLEŞTİRİLMİŞ SORGU ===\n');
    complex_query = [
         'SELECT s.simulation_name, l.latitude, l.longitude, ' ...
    'sr.start_time, sr.stop_time, ad.barometric_pressure, out.final_output_value ' ...
    'FROM SIMULATION_RUN sr ' ...
    'JOIN SIMULATION s ON sr.simulation_id = s.simulation_id ' ...
    'JOIN LOCATION l ON sr.location_id = l.location_id ' ...
    'JOIN ATMOSPHERIC_DATA ad ON sr.run_id = ad.run_id ' ...
    'JOIN OUTPUT_RESULTS out ON sr.run_id = out.run_id ' ...
    'ORDER BY sr.run_id;'
    ];
    
    result = fetch(conn, complex_query);
    if ~isempty(result)
        fprintf('Birleştirilmiş sorgu başarılı! %d kayıt bulundu.\n', height(result));
        disp(result);
    end
    
    close(conn);
    fprintf('\nVeritabanı testi tamamlandı!\n');
end